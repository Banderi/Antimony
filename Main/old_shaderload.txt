

HRESULT LoadCompiledShader(LPCWSTR pPath, ID3D11VertexShader *pOutVS)
{
	if (!PathFileExistsW(pPath)) return D3D11_ERROR_FILE_NOT_FOUND;

	ifstream vs_stream;
	size_t vs_size;
	char* vs_data;

	vs_stream.open(pPath, ifstream::in | ifstream::binary);
	vs_stream.seekg(0, ios::end);
	vs_size = size_t(vs_stream.tellg());
	vs_data = new char[vs_size];
	vs_stream.seekg(0, ios::beg);
	vs_stream.read(&vs_data[0], vs_size);
	vs_stream.close();

	return dev->CreateVertexShader(vs_data, vs_size, 0, &pOutVS);
}
HRESULT LoadCompiledShader(LPCWSTR pPath, ID3D11PixelShader *pOutPS)
{
	if (!PathFileExistsW(pPath)) return D3D11_ERROR_FILE_NOT_FOUND;

	ifstream ps_stream;
	size_t ps_size;
	char* ps_data;

	ps_stream.open(pPath, ifstream::in | ifstream::binary);
	ps_stream.seekg(0, ios::end);
	ps_size = size_t(ps_stream.tellg());
	ps_data = new char[ps_size];
	ps_stream.seekg(0, ios::beg);
	ps_stream.read(&ps_data[0], ps_size);
	ps_stream.close();

	return dev->CreatePixelShader(ps_data, ps_size, 0, &pOutPS);
}

HRESULT LoadShader(LPCWSTR pPath, ID3D11VertexShader *pOutVS)
{
	if (!PathFileExistsW(pPath)) return D3D11_ERROR_FILE_NOT_FOUND;

	ID3D10Blob *vs_blob;

	D3DX11CompileFromFileW(pPath, 0, 0, "main", "vs_4_0", 0, 0, 0, &vs_blob, 0, 0);

	return dev->CreateVertexShader(vs_blob->GetBufferPointer(), vs_blob->GetBufferSize(), 0, &pOutVS);
}
HRESULT LoadShader(LPCWSTR pPath, ID3D11PixelShader *pOutPS)
{
	if (!PathFileExistsW(pPath)) return D3D11_ERROR_FILE_NOT_FOUND;

	ID3D10Blob *ps_blob;

	D3DX11CompileFromFileW(pPath, 0, 0, "main", "vs_4_0", 0, 0, 0, &ps_blob, 0, 0);

	return dev->CreatePixelShader(ps_blob->GetBufferPointer(), ps_blob->GetBufferSize(), 0, &pOutPS);
}
HRESULT LoadShader(LPCWSTR pPath, ID3D11VertexShader *pOutVS, ID3D11PixelShader *pOutPS, ID3D10Blob **vs_blob, ID3D10Blob **ps_blob)
{
	if (!PathFileExistsW(pPath)) return D3D11_ERROR_FILE_NOT_FOUND;

	ID3D10Blob *errors;
	FILE *pFile;

	HRESULT hr;

	hr = D3DX11CompileFromFileW(pPath, 0, 0, "VShader", "vs_4_0", D3D10_SHADER_DEBUG | D3D10_SHADER_SKIP_OPTIMIZATION, 0, 0, vs_blob, &errors, 0);
#ifdef _DEBUG
	if (errors)
	{
		pFile = fopen("compiledShader.txt", "w+");
		fwrite(errors->GetBufferPointer(), sizeof(char), errors->GetBufferSize(), pFile);
		fclose(pFile);
	}	
#endif
	hr = D3DX11CompileFromFileW(pPath, 0, 0, "PShader", "ps_4_0", 0, 0, 0, ps_blob, &errors, 0);

#ifdef _DEBUG
	if (errors)
	{
		pFile = fopen("compiledShader.txt", "w+");
		fwrite(errors->GetBufferPointer(), sizeof(char), errors->GetBufferSize(), pFile);
		fclose(pFile);
	}
#endif

	HRESULT vs = dev->CreateVertexShader((*vs_blob)->GetBufferPointer(), (*vs_blob)->GetBufferSize(), 0, &pOutVS);
	HRESULT ps = dev->CreatePixelShader((*ps_blob)->GetBufferPointer(), (*ps_blob)->GetBufferSize(), 0, &pOutPS);

	if (FAILED(vs) || FAILED(ps))
		return E_FAIL;
	else
		return S_OK;
}